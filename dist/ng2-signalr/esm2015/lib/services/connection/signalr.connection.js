import { Subject } from 'rxjs';
import { BroadcastEventListener } from '../eventing/broadcast.event.listener';
import { ConnectionStatus } from './connection.status';
export class SignalRConnection {
    constructor(jConnection, jProxy, zone, configuration) {
        this._enabledLogging = true;
        this._jProxy = jProxy;
        this._jConnection = jConnection;
        this._zone = zone;
        this._errors = this.wireUpErrorsAsObservable();
        this._status = this.wireUpStatusEventsAsObservable();
        this._configuration = configuration;
        this._enabledLogging = configuration.logging;
        this._listeners = {};
    }
    get errors() {
        return this._errors;
    }
    get status() {
        return this._status;
    }
    get enabledLogging() {
        return this._enabledLogging;
    }
    set enabledLogging(val) {
        this._enabledLogging = val;
    }
    start() {
        const jTransports = this.convertTransports(this._configuration.transport);
        const $promise = new Promise((resolve, reject) => {
            this._jConnection
                .start({
                jsonp: this._configuration.jsonp,
                pingInterval: this._configuration.pingInterval,
                transport: jTransports,
                withCredentials: this._configuration.withCredentials,
            })
                .done(() => {
                this.log('Connection established, ID: ' + this._jConnection.id);
                this.log('Connection established, Transport: ' + this._jConnection.transport.name);
                resolve(this);
            })
                .fail((error) => {
                this.log('Could not connect');
                reject('Failed to connect. Error: ' + error.message); // ex: Error during negotiation request.
            });
        });
        return $promise;
    }
    stop() {
        this._jConnection.stop();
    }
    get id() {
        return this._jConnection.id;
    }
    invoke(method, ...parameters) {
        if (method == null) {
            throw new Error('SignalRConnection: Failed to invoke. Argument \'method\' can not be null');
        }
        this.log(`SignalRConnection. Start invoking \'${method}\'...`);
        const $promise = new Promise((resolve, reject) => {
            this._jProxy.invoke(method, ...parameters)
                .done((result) => {
                this.log(`\'${method}\' invoked succesfully. Resolving promise...`);
                resolve(result);
                this.log(`Promise resolved.`);
            })
                .fail((err) => {
                this.log(`Invoking \'${method}\' failed. Rejecting promise...`);
                reject(err);
                this.log(`Promise rejected.`);
            });
        });
        return $promise;
    }
    listen(listener) {
        if (listener == null) {
            throw new Error('Failed to listen. Argument \'listener\' can not be null');
        }
        const callback = (...args) => {
            this.run(() => {
                let casted = null;
                if (args.length > 0) {
                    casted = args[0];
                }
                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');
                listener.next(casted);
                this.log('listener next() called.');
            }, this._configuration.executeEventsInZone);
        };
        this.setListener(callback, listener);
    }
    stopListening(listener) {
        if (listener == null) {
            throw new Error('Failed to listen. Argument \'listener\' can not be null');
        }
        this.log(`SignalRConnection: Stopping listening to server event with name ${listener.event}`);
        if (!this._listeners[listener.event]) {
            this._listeners[listener.event] = [];
        }
        for (const callback of this._listeners[listener.event]) {
            this._jProxy.off(listener.event, callback);
        }
        this._listeners[listener.event] = [];
    }
    listenFor(event) {
        if (event == null || event === '') {
            throw new Error('Failed to listen. Argument \'event\' can not be empty');
        }
        const listener = new BroadcastEventListener(event);
        this.listen(listener);
        return listener;
    }
    listenForRaw(event) {
        if (event == null || event === '') {
            throw new Error('Failed to listen. Argument \'event\' can not be empty');
        }
        const listener = new BroadcastEventListener(event);
        const callback = (...args) => {
            this.run(() => {
                let casted = [];
                if (args.length > 0) {
                    casted = args;
                }
                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');
                listener.next(args);
                this.log('listener next() called.');
            }, this._configuration.executeEventsInZone);
        };
        this.setListener(callback, listener);
        return listener;
    }
    setListener(callback, listener) {
        this.log(`SignalRConnection: Starting to listen to server event with name ${listener.event}`);
        this._jProxy.on(listener.event, callback);
        if (this._listeners[listener.event] == null) {
            this._listeners[listener.event] = [];
        }
        this._listeners[listener.event].push(callback);
    }
    convertTransports(transports) {
        if (transports instanceof Array) {
            return transports.map((t) => t.name);
        }
        return transports.name;
    }
    wireUpErrorsAsObservable() {
        const sError = new Subject();
        this._jConnection.error((error) => {
            this.run(() => sError.next(error), this._configuration.executeErrorsInZone);
        });
        return sError;
    }
    wireUpStatusEventsAsObservable() {
        const sStatus = new Subject();
        // aggregate all signalr connection status handlers into 1 observable.
        // handler wire up, for signalr connection status callback.
        this._jConnection.stateChanged((change) => {
            this.run(() => sStatus.next(new ConnectionStatus(change.newState)), this._configuration.executeStatusChangeInZone);
        });
        return sStatus.asObservable();
    }
    onBroadcastEventReceived(listener, ...args) {
        this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');
        let casted = null;
        if (args.length > 0) {
            casted = args[0];
        }
        this.run(() => {
            listener.next(casted);
        }, this._configuration.executeEventsInZone);
        this.log('listener next() called.');
    }
    log(...args) {
        if (this.enabledLogging === false) {
            return;
        }
        // tslint:disable-next-line: no-console
        console.log(args.join(', '));
    }
    run(func, inZone) {
        if (inZone) {
            this._zone.run(() => func());
        }
        else {
            this._zone.runOutsideAngular(() => func());
        }
    }
}
//# sourceMappingURL=data:application/json;base64,