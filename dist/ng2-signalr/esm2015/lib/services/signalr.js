import { Injectable, Inject } from '@angular/core';
import { SignalRConfiguration } from './signalr.configuration';
import { SignalRConnection } from './connection/signalr.connection';
import { SIGNALR_JCONNECTION_TOKEN } from './signalr.module';
import * as i0 from "@angular/core";
import * as i1 from "./signalr.configuration";
export class SignalR {
    constructor(configuration, zone, jHubConnectionFn /* use type 'any'; Suggested workaround from angular repository: https://github.com/angular/angular/issues/12631 */) {
        this._configuration = configuration;
        this._zone = zone;
        this._jHubConnectionFn = jHubConnectionFn;
    }
    createConnection(options) {
        const configuration = this.merge(options ? options : {});
        this.logConfiguration(configuration);
        // create connection object
        const jConnection = this._jHubConnectionFn(configuration.url);
        jConnection.logging = configuration.logging;
        jConnection.qs = configuration.qs;
        // create a proxy
        const jProxy = jConnection.createHubProxy(configuration.hubName);
        // !!! important. We need to register at least one function otherwise server callbacks will not work.
        jProxy.on('noOp', () => { });
        const hubConnection = new SignalRConnection(jConnection, jProxy, this._zone, configuration);
        return hubConnection;
    }
    connect(options) {
        return this.createConnection(options).start();
    }
    logConfiguration(configuration) {
        try {
            const serializedQs = JSON.stringify(configuration.qs);
            const serializedTransport = JSON.stringify(configuration.transport);
            if (configuration.logging) {
                this.log(`Creating connecting with...`);
                this.log(`configuration:[url: '${configuration.url}'] ...`);
                this.log(`configuration:[hubName: '${configuration.hubName}'] ...`);
                this.log(`configuration:[qs: '${serializedQs}'] ...`);
                this.log(`configuration:[transport: '${serializedTransport}'] ...`);
            }
        }
        catch (err) { /* */ }
    }
    log(str) {
        // tslint:disable-next-line: no-console
        console.log(str);
    }
    merge(overrides) {
        const merged = new SignalRConfiguration();
        merged.hubName = overrides.hubName || this._configuration.hubName;
        merged.url = overrides.url || this._configuration.url;
        merged.qs = overrides.qs || this._configuration.qs;
        merged.logging = this._configuration.logging;
        merged.jsonp = overrides.jsonp || this._configuration.jsonp;
        merged.withCredentials = overrides.withCredentials || this._configuration.withCredentials;
        merged.transport = overrides.transport || this._configuration.transport;
        merged.executeEventsInZone = overrides.executeEventsInZone || this._configuration.executeEventsInZone;
        merged.executeErrorsInZone = overrides.executeErrorsInZone || this._configuration.executeErrorsInZone;
        merged.executeStatusChangeInZone = overrides.executeStatusChangeInZone || this._configuration.executeStatusChangeInZone;
        merged.pingInterval = overrides.pingInterval || this._configuration.pingInterval;
        return merged;
    }
}
SignalR.ɵfac = function SignalR_Factory(t) { return new (t || SignalR)(i0.ɵɵinject(i1.SignalRConfiguration), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(SIGNALR_JCONNECTION_TOKEN)); };
SignalR.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SignalR, factory: SignalR.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SignalR, [{
        type: Injectable
    }], function () { return [{ type: i1.SignalRConfiguration }, { type: i0.NgZone }, { type: undefined, decorators: [{
                type: Inject,
                args: [SIGNALR_JCONNECTION_TOKEN]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,