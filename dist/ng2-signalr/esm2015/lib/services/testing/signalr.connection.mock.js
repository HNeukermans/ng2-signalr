import { BroadcastEventListener } from '../eventing/broadcast.event.listener';
export class SignalRConnectionMock {
    constructor(_mockErrors$, _mockStatus$, _listeners) {
        this._mockErrors$ = _mockErrors$;
        this._mockStatus$ = _mockStatus$;
        this._listeners = _listeners;
    }
    get errors() {
        return this._mockErrors$;
    }
    get status() {
        return this._mockStatus$.asObservable();
    }
    get id() {
        return 'xxxxxxxx-xxxx-xxxx-xxxxxxxxx';
    }
    stop() {
        //
    }
    start() {
        return Promise.resolve(null); // TODO: implement
    }
    invoke(method, ...parameters) {
        return Promise.resolve(null);
    }
    listen(listener) {
        this._listeners[listener.event] = listener;
    }
    listenFor(event) {
        const listener = new BroadcastEventListener(event);
        this.listen(listener);
        return listener;
    }
    listenForRaw(event) {
        const listener = new BroadcastEventListener(event);
        this._listeners[listener.event] = listener;
        return listener;
    }
    stopListening(listener) {
        delete this._listeners[listener.event];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsci5jb25uZWN0aW9uLm1vY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzItc2lnbmFsci9zcmMvbGliL3NlcnZpY2VzL3Rlc3Rpbmcvc2lnbmFsci5jb25uZWN0aW9uLm1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFROUUsTUFBTSxPQUFPLHFCQUFxQjtJQUM5QixZQUNZLFlBQTBCLEVBQzFCLFlBQXVDLEVBQ3ZDLFVBQStCO1FBRi9CLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGlCQUFZLEdBQVosWUFBWSxDQUEyQjtRQUN2QyxlQUFVLEdBQVYsVUFBVSxDQUFxQjtJQUMzQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQUksRUFBRTtRQUNGLE9BQU8sOEJBQThCLENBQUM7SUFDMUMsQ0FBQztJQUVNLElBQUk7UUFDUCxFQUFFO0lBQ04sQ0FBQztJQUVNLEtBQUs7UUFDUixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxrQkFBa0I7SUFDcEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFjLEVBQUUsR0FBRyxVQUFpQjtRQUM5QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVNLE1BQU0sQ0FBSSxRQUFtQztRQUNoRCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDL0MsQ0FBQztJQUVNLFNBQVMsQ0FBSSxLQUFhO1FBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksc0JBQXNCLENBQUksS0FBSyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRU0sWUFBWSxDQUFDLEtBQWE7UUFDN0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxzQkFBc0IsQ0FBUSxLQUFLLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDM0MsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVELGFBQWEsQ0FBSSxRQUFtQztRQUNoRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIEFzeW5jU3ViamVjdCwgUmVwbGF5U3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBTaWduYWxSQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL3NpZ25hbHIuY29uZmlndXJhdGlvbic7XHJcbmltcG9ydCB7IEJyb2FkY2FzdEV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLi9ldmVudGluZy9icm9hZGNhc3QuZXZlbnQubGlzdGVuZXInO1xyXG5pbXBvcnQgeyBDb25uZWN0aW9uU3RhdHVzIH0gZnJvbSAnLi4vY29ubmVjdGlvbi9jb25uZWN0aW9uLnN0YXR1cyc7XHJcbmltcG9ydCB7IElTaWduYWxSQ29ubmVjdGlvbiB9IGZyb20gJy4uL2Nvbm5lY3Rpb24vaS5zaWduYWxyLmNvbm5lY3Rpb24nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTGlzdGVuZXJDb2xsZWN0aW9uIHtcclxuICAgIFtuYW1lOiBzdHJpbmddOiBCcm9hZGNhc3RFdmVudExpc3RlbmVyPGFueT47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaWduYWxSQ29ubmVjdGlvbk1vY2sgaW1wbGVtZW50cyBJU2lnbmFsUkNvbm5lY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBfbW9ja0Vycm9ycyQ6IFN1YmplY3Q8YW55PixcclxuICAgICAgICBwcml2YXRlIF9tb2NrU3RhdHVzJDogU3ViamVjdDxDb25uZWN0aW9uU3RhdHVzPixcclxuICAgICAgICBwcml2YXRlIF9saXN0ZW5lcnM6IElMaXN0ZW5lckNvbGxlY3Rpb24pIHtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXJyb3JzKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vY2tFcnJvcnMkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzdGF0dXMoKTogT2JzZXJ2YWJsZTxDb25uZWN0aW9uU3RhdHVzPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vY2tTdGF0dXMkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC14eHh4LXh4eHh4eHh4eCc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0b3AoKTogdm9pZCB7XHJcbiAgICAgICAgLy9cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhcnQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpOyAvLyBUT0RPOiBpbXBsZW1lbnRcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW52b2tlKG1ldGhvZDogc3RyaW5nLCAuLi5wYXJhbWV0ZXJzOiBhbnlbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbGlzdGVuPFQ+KGxpc3RlbmVyOiBCcm9hZGNhc3RFdmVudExpc3RlbmVyPFQ+KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2xpc3RlbmVyLmV2ZW50XSA9IGxpc3RlbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsaXN0ZW5Gb3I8VD4oZXZlbnQ6IHN0cmluZyk6IEJyb2FkY2FzdEV2ZW50TGlzdGVuZXI8VD4ge1xyXG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gbmV3IEJyb2FkY2FzdEV2ZW50TGlzdGVuZXI8VD4oZXZlbnQpO1xyXG4gICAgICAgIHRoaXMubGlzdGVuKGxpc3RlbmVyKTtcclxuICAgICAgICByZXR1cm4gbGlzdGVuZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxpc3RlbkZvclJhdyhldmVudDogc3RyaW5nKTogQnJvYWRjYXN0RXZlbnRMaXN0ZW5lcjxhbnlbXT4ge1xyXG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gbmV3IEJyb2FkY2FzdEV2ZW50TGlzdGVuZXI8YW55W10+KGV2ZW50KTtcclxuICAgICAgICB0aGlzLl9saXN0ZW5lcnNbbGlzdGVuZXIuZXZlbnRdID0gbGlzdGVuZXI7XHJcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3BMaXN0ZW5pbmc8VD4obGlzdGVuZXI6IEJyb2FkY2FzdEV2ZW50TGlzdGVuZXI8VD4pOiB2b2lkIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2xpc3RlbmVyLmV2ZW50XTtcclxuICAgIH1cclxufVxyXG4iXX0=